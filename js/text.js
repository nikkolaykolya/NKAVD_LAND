

//-----------------------------------------------
//--------------------------JS заметки и подсказки--------------------------
//-----------------------------------------------



/*---------------------------------------Вступ---------------------------------------*/

/*
Значения в Js могут в себя включать:
1. Значения
2. Операторы
3. Выражения
4. Ключевые слова
5. Коментарии
*/

//_______________________________________

/*
1. ЗНАЧЕНИЯ

В JavaScript есть несколько типов значений (values):
фиксированные значения (литералы), значения констант и
значения переменных
*/

//Примеры литералов
25											//Литерал целого числа
23.8										//Литерал дробного числа
'JavaScript'							//Литерал строки
"JavaScript"							//Литерал строки
[];											//Литерал массива
[15, 7, 89]								//Литерал массива
{ }										//Литерал объекта
{
	name: 'Имя',
		surname: 'Отчество'
};											//Литерал объекта
(ab | bc);								//Литерал регулярного выражения

// В язаках програмирования константы и переменные
// используют для храниения значений данных
const maxAge = 112;						//Константа
var section = 'JS';						//Переменная
let arr = ['HTML', 'CSS', 'JS'];		//Переменная

//_______________________________________

/*
2. ОПЕРАТОРЫ

В JavaScript имеется очень много различных операторов.
Они обозначают операцию, которую можно произвести.
*/

//Примеры операторов
// / + * - = и т д.
console.log('my' + 'age');

//_______________________________________

/*
3. ВЫРАЖЕНИЯ

Выражения (expression) - это комбинация значений,
переменых и операторов, которые либо присваиваают
переменной значение, либо возвращают какое-то
значение без его присвоения.
*/

//Пример выражения
let num = 4 			//Выражение присвоения
console.log(num);
'my' + 'Age';			//Выражение без присвоения

//_______________________________________

/*
4. КЛЮЧЕВЫЕ СЛОВА

Инструкции JavaScript часто начинаются с ключевого слова
(keyword). Оно (ключевое слово) предназначено для того, чтобы
определить кокое действие JavaScript необходимо выполнить.
*/

//Примеры ключевого слова
let num = 'Учу JS';
console.log(num);

//_______________________________________

/*
5. БЛОК ИНСТРУКЦИЙ

JavaScript инструкции можно сгрупировать с помощью так
называемого блока, по сути фигурных скобок {...}.
Как правило, используется в функциях, циклах и т.д.
*/

//Пример блока инструкций
function name() {
	console.log('Учу');
	console.log('JS');
}
name();
//_______________________________________

/*
6. КОМЕНТАРИИ
*/
//Однострочный коментарий


/* Много строчный
коментарий */


//_______________________________________

/* Регистер */

/* ЧУВСТВИТЕЛЬНОСТЬ К РЕГИСТРУ
JavaScript является регистрозависимым языком.
Это значит, что ключевые слова, переменные,
имена функкций и другие идентификаторы языка
должны содержать одинаковые наборы прописных и строчных букв.
*/



/*---------------------------------------Переменные---------------------------------------*/

//ОБЯВЛЕНИЕ ПЕРЕМЕННОЙ

//ключевые слова для обявления переменных

let name1;
var name2;

/*var и let почти не отличаются
var (variable) - это первое ключевое слово присвоения значения переменной
переменную var можно использовать ещё до её объявления в коде,
строгий режим не влияет на это.
Переменную var видно везде за приделами блока, кроме функции (function)
*/

const name3;
/* constanta (const) - это таже переменная которую нельзя изменить
почти нельзя. Можно изменить только значение но не тип данных.

/*
Имя переменной может содержать только буквы,
лучше латинского алфавита, цифры и символы $ и _.
При этом первый символ не должен быть цифрой.
*/

//ПРИСВОЕНИЕ ЗНАЧЕНИЯ ПЕРЕМЕННОЙ

//Объявление без значения
let myNomderAge;

//Присвоение значения
myNomderAge = '21';

//Можно объявить и записать переменную сразу
let myAge = '21';

//КОНСТАНТЫ

/*Имена костант с заранее извесными значениями
нужно называть в верхнем регистре разделяя нижним подчёркиванием*/
const BLOCK_SIZE = 25;
const COLOR_RED = "#F00";

//Смена значения в константе
//Объект с даннми
const myProfile = {
	myName: 'Артур',
	age: 21,
	messege: 'Изменяю значения константы'
}

//Заменяю значение одного из полей
myProfile.messege = 'Изменённое значение константы';



/*---------------------------------------ТИАЫ ДАННЫХ---------------------------------------*/


//ДИНАМИЧЕСКАЯ ТИПИЗАЦИЯ
/*
JavaScript является динамически типизированным.
То есть тип данных переменной меняется динамически
в момент присвоения либо смены её значения.
 А не в момент объявления
 */

let userName;						//Обявляю переменную

userName = "user";				//Строка (String)

userName = 21;					//Число (Numder)


/*Оператор typeof выводит тип данных переменной*/
//Пример
console.log(typeof userName);

/* В JavaScript существует 9 типов данных

---------------------------------------------
Undefined (Неопределенность)			Неопределенный тип. Переменная вернёт
значение undefined если она была объявлена но не присвоено значение
---------------------------------------------
Null (Пустота)								Пустое место (ничего), переменная определена но она пустая
---------------------------------------------
Boolean (Сравнение)						Это Булевый или логический тип.
Может принимать только 2 значения: true (истина) и false (ложь)
---------------------------------------------
Number (Число)								Числовой тип данных представляет значения
как в виде целых чисел, так и в виде чисел с плавающей точкой. Не только числа могут
возвращать этот тип данных
Infiniti (весконечность)				Можно получить поделив или умножив число на 0
-Infiniti (минус бесконечность)		Можно получить поделив или умножив отрицательное число на 0
NaN (математическая ошибка)			Если гдето в выражении будет NaN то результат будет NaN | деление строки на число
---------------------------------------------
Biglnt (Огромное число) 				Переменная number не может содержать число дольше,
чем 9007199254740991, или меньше, чем -9007199254740991. А Biglnt может.
Чтобы его получить нужно к числу добавить букву n. 123456n.
---------------------------------------------
String (Строка)							Вернет string если переменная заключена в кавычки '',"",``.
Обратные кавычки позволяют встраивать в строку некие выражения | `Возраст: ${userAge}`;
---------------------------------------------
Object										Содержит всебе сложную структуру данных
	пример
	let userInfo = {
		name: "user",
		age: number
	}
	Содержит в себе набор необязательных свойств
	Свойства это пара
	Ключ: name
	Значение: user
	Разделяется ключ и значение двоеточием (:)
	Свойства между собой разделя.т запятой (,)
---------------------------------------------
Symbol										Это уникальный идендитификатор объекта
	Создается с помощью одноименной функции
	let id = symbol("id");
---------------------------------------------
Function										Тот же Object
просто выведен в отдельный тип для более простого определения функции
---------------------------------------------
*/

/*
В JavaScript можно перепбразовывать типы данных с помощью оператора и специальных функций

Пример:
Строковое преобразование
let userAge = 21;						Тип данных numder(число)
userAge = String(userAge);			Тип данных string(строка)

Численное преобразование
let userAge = "21";					Тип данных string(строка)
userAge = Numder(userAge);			Тип данных numder(число)

Логическое преобразование
let userAge = 21;						Тип данных numder(число)
userAge = Boolean(userAge);		Тип данных Boolean(логическое)
*/



/*---------------------------------------ОПЕРАТОРЫ---------------------------------------*/


//Термины: "Унарный", "Бинарный", "Операнд"

/*
Операнд - это то к чему применяется оператор,
их ещё называют аргументами.
*/

//Пример:
/*1*/
let userAge = 30 - 9; //Числа 30 и 9 - это операнды
/*2*/
let uesrHeight = h - y; //Переменные h и y - это операнды

/*
Бинарными называются операторы которые
применяются к двум операндам.
В моем примере вычитание -, это бинарный оператор.
Пример:
*/
let userAge = 30 - 9;

/*
Унарным считается оператор, который
применен только к одному операнду
Пример
*/
let userCash = -800;

/*
JavaScript поддерживает такие математические выражения:
*/
let x;

//Сложение +
x = 5 + 8;

//Вычитание -
x = 8 - 5;

//Умножение *
x = 5 * 8;

//Деление /
x = 40 / 8;

//Взятие остатка от деления %
x = 8 % 5;

//Возведение в степень **
x = 5 ** 8;


//Специальные возможности операторов

//Переменные оператора сложения к строкам
let resultOne = "Я" + "" + "изучаю" + "" + "JavaScript";

/*
Если в выражении есть строка, если хотя бы один операнд
будет строкой, то результат тоже будет строкой,
Порядок значения не имеет
*/

//Казусы
let resultTwo = 2 + "2";

//Операции до сложения со строкой выполняются как обычно
let resultThree = 51 - 20 + "лет";


//Унарный оператор сложения +

//Пример
let users = "25";
let admins = "10";
console.log(users + admins); //Вывод: Строка 2510
console.log(+users + +admins); //Вывод: Число 35

//Более длинная запись
console.log(Number(users) + Number(admins)); //Вывод: Число 35

//Если в выражении несколько операторов то будут выполнятся сначала бинарные а потом унарные


//Инкремент/декремент

//Инкремент ++
let addUser = 2;
addUser++; // Увеличение значения на единицу

//Декремент --
let addUser = 2;
addUser--; // Уменьшение значения на единицу

//Инкремент и декремент можно применить только к переменной

//Постфиксная форма
usersCounter++;
usersCounter--;

//Префиксная форма
++usersCounter;
--usersCounter;


//Оператор запятая

/*Предоставляет нам возможность вычислять несколько выражений,
разделяя их запятой. Каждое выражение выполняется,
но возвращается результат только посленнего.*/
let usersCounter = (8 + 2, 19 + 1); // Вывод: 20


//Побитовые операторы

/*Работают с 32битной системой, в используются очень редко

AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый с заполнением нулями) ( >>> )
*/


//Операторы сравнения

/*
Больше: a > b
Меньше: a < b
Больше или равно: a >= b
Меньше или равно: a <= b
Равно: a == b
Не равно: a != b
Строгое равно: a === b
Строгое не равно: a !== b
*/


/*
Операторы сравнения возвращают логический
тип данных со значением true или false:
*/

console.log(2 > 1);		//Вывод: true
console.log(2 > 4);		//Вывод: false
console.log(98 == 84);	//Вывод: false
console.log(8 != 18);	//Вывод: true

//Присваиваем результат переменной

let result = 11 > 10;
console.log(result);		//Вывод: true

//Сравнение разных типов

//Преобразование в число
/*При сравнивании числа и строки в которой есть число то строка будет преобразована в число
Пример:*/
console.log('58' > 10); //Вернёт: true
console.log('07' == 7); //Вернёт: true

/*Логическое значение становится 
true 1 a false 0.*/
console.log(true == 1); //Вернёт: true
console.log(false == 0); //Вернёт: true

//Оператор строгого равенства

/*Оператор строгого равенства или не равенства
проверяет равенство без присвоения типов*/

console.log(0 === false); //Вернёт: false
console.log('007' === 7); //Вернёт: false
console.log('58' !== 58); //Вернёт: true

//Сравнение null и undefindet

//Строгое равенство
console.log(null === undefined); //Вернёт: false

//Не строгое равенство
console.log(null == undefined); //Вернёт: true

//Сравнение null и 0
console.log(null > 0); //Вернёт: false
console.log(null == 0); //Вернёт: false
console.log(null >= 0); //Вернёт: true

//Сравнение undefined и 0
console.log(undefined > 0); //Вернёт: false
console.log(undefined == 0); //Вернёт: false
console.log(undefined >= 0); //Вернёт: false

/*Что бы избежать проблем при сравнивании нужно очень осторожно к любому сравнению с undefined / null,
кроме случаев строгого равенства ===. Не испорльзовать сравнение >= > < <= с переменными, которые могут
принимать значения null / undefined, разве что ты точно знаешь что делаешь. В любом случае, если переменная
может принимать эти значения, то стоит добавить для них отдельные проверки*/



//Логические операторы 
//Оператор || (или)
/*Оператор или, записивается как две вертикальные черты.
Процесс его работы:
1. Вычисляют операнды слева направо.
2. Каждый операнд конвертирует в логическое значение. Если результат true,
	останавливается и возвращает исходное значение этого операнда.
3. Если все операнды являются ложными (false), возвращает  значение последнего из них*/

//Булевые значения
console.log(true || true);		//Вернёт: true
console.log(false || true);	//Вернёт: true
console.log(true || false);	//Вернёт: true
console.log(false || false);	//Вернёт: false


//Разные типы

//Первый true это 1
console.log(1 || 0);											//Вернет: 1
//Первый true это true
console.log(true || 'name');								//Вернет: true
//Первый true это 58
console.log(null || 58);									//Вернет: 58
//Первый true это name
console.log(null || 'name' || 0);						//Вернет: name
//true нет совсем, вернет последнее значение - 0
console.log(undefined || '' || null || 0);			//Вернет: 0


//Присвоение значения в переменную

let userName = '';
let userNickName = 'Nick';

let user = userName || userNickName || "Без имени";		//Вернёт: Nick


//Сокращённое вычисление. Условие.
let admins = 0;
let users = 5;
admins > users || users++;
console.log(users);			//Вывод: 6


//Оператор &&
/*
Следующий логический оператор И. Пишется как два амперсанда && выполняет следующее действия:
1. Вычисляеи операнды слева направо.
2. Каждый операнд переобразовует в логичееское значение. Если результат false,
	останавливается и возвращает исходное значение этого операнда
3. Если все операнды были истинными, возвращает значение последнего.
*/

//Булевые значения
console.log(true && true);			//Вывод: true
console.log(false && true);		//Вывод: false
console.log(true && false);		//Вывод: false
console.log(false && false);		//Вывод: false


//Разные типы

//Пример 1. 0 - false
console.log('name' && 0 && 2 && 3);		//Вернёт: 0
//Пример 2. null - false
console.log(1 && 2 && null && 3);		//Вернёт: null
//Пример 3. Все true
console.log('15' && '42');					//Вернёт: 42

//Приоритет оператора && (И) больше чем оператора || (ИЛИ)
console.log(1 && 0 || 2 && 1);			//Вернёт: 1

//Подобие условия
let users = 1;
(users > 0) && console.log(`Пользователей ${users}`);		//Вернёт: Пользователей 1


//Оператор ! (НЕ)
/*
Выполняет следующие действия:
1. Сначала приводит аргумент к логическому типу true / false.
2. Затем возвращает противоположное значение.
*/

//Булевое значение
console.log(!true);		//Вернёт: false

//Разные типы
console.log(!null);			//Вернёт: true
console.log(!1);				//Вернёт: false
console.log(!'');				//Вернёт: true
console.log(!'name');		//Вернёт: false

/*Приоритет ! (НЕ) является наивысшим из всех логических операторов,
поэтому он всегда будет выполянться первым, перед && (И) или || (ИЛИ)*/
console.log(!true && 58 || 18 && !1); 			//Вернёт: false

//Используется для преобразования типа в boolean
console.log(!!'Name');				//Вернёт: true
//или
console.log(Boolean('Name'));		//Вернёт: true


//Оператор объединения с null (??)

/*Оператор ?? возвращает первый аргумент, если он не null / undefined, иначе второй.*/

let name;
console.log(name ?? "name");		//Вернёт: Без имени



/*---------------------------------------IF, ELSE---------------------------------------*/


//Синтаксис
let massege = "IF, ELSE";

if (2 > 1) {
	//код выполнится только если выражение вернёт true
	console.log(massege);
}

let first = 5;
let second = 10;

if (first === second) {
	//код выполнится только если выражение вернёт true
	console.log(massege);
}

//Cложное условие
if (2 + 1 == 3 && "1" == 1 || 10 > 5 && 10 === 1) {
	//код выполнится только если выражение вернёт true
	console.log(massege);
}

//Преобразование типов
if ('') {//Сейчас false но если добавить все пробел то сразу будет true
	//код выполнится только если выражение вернёт true
	console.log(massege);
}

//Более короткая запись
/*Код выполнится только если выражение в скобках вернёт true*/
if (2 > 1) console.log(massege);

//Блоки ELSE и ELSE IF
let massege = "IF, ELSE";
let number = 5;

if (number > 1) {
	console.log(massege);
} else {
	console.log('Условие не выполнено');
}

if (number > 50) {
	console.log('5 больше 50');
} else if (number > 30) {
	console.log('5 больше 30');
} else if (number > 10) {
	console.log('5 больше 10');
} else if (number > 1) {
	console.log('5 больше 1');
} else if {
	console.log('Условие не выполнено');
}



//Условный оператор "?"
let massege = "Привет";
let massegeEnd;
if (5 > 1) {
	massegeEnd = " тебе!";
} else {
	massegeEnd = " мне!";
}
//Короткая запись
let massegeEnd = (5 > 1) ? " тебе!" : " мне!";
messege += massegeEnd;
console.log(massege);



/*---------------------------------------ЦИКЛЫ---------------------------------------*/



//Цикл WHILE

//Синтаксис
while (условие) {
	//Тело цикла
	//Место выполнения кода
}
//Пример
let num = 0;
while (num < 5) {
	console.log(num);
	num++;
}
let num = 5;
while (num) {
	console.log(num);
	num--;
}

//Пример без {}
let num = 5;
while (num) console.log(num--);


//Конструкция DO...WHILE
//Его нужно использовать когда нужно выполнить хотя-бы один раз условие

let num = 0;
do {
	console.log(num);
	num++;
} while (num < 5);


//Цикл FOR

//Синтаксис
for (Начало; Условие; Шаг) {
	//Тело цикла
	//Место выполнения кода
}

//Пример
for (let num = 0; num < 5; num++) {
	console.log(num);
}

/*
Работа цикла for:
1) Выполняется начало - let num = 0
2) Выполняется условие - num < 5
3) Если условие true выполняется тело цикла - console.log(num)
4) Выполняется шаг - num++
Повтор начиная с пункта №2
*/

//Встроенное объявление переменной
for (let num = 0; num < 5; num++) {
	console.log(num);
}
//C переменной num можно работать только внутри цикла

//Существующая переменная
let num
//Объявление переменной раньше позволяет ею пользоватсья и после цикла
for (let num = 0; num < 5; num++) {
	console.log(num);
}
console.log(`вывод вне цикла ${num}`);

//Можно убрать любую часть цикла
let num = 0;
for (num < 5;) {
	console.log(num);
	num++;
}


//Деректива break
//break прекращает досрочно! работу цикла
let num = 0;
for (num < 5; num++) {
	console.log(num);
	if (num == 2) break;
}
console.log(`Работа окончена, num = ${num}`);

//Деректива continue
//Досрочно прекращает выполнение части цикла и переходит на следующую итерацию
let num = 0;
for (num < 5; num++) {
	if (num == 2) continue;
	console.log(num);
}

//Дерективы break и continue нельзя использовать с "?"

//Метки
//Преривает или переключается на родительский список из дочернего
firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			break firstFor
		}
		console.log(size);
	}
}

//Итоги
/*
1. while - Проверяет условие перед каждой итерацией.
2. do..while - Проверяет условие после каждой итерации.
3. for (;;) - проверяет условие перед каждой итерацией, есть
	возможность задать дополнительные настройки

Чтобы задать бесконечный цикл, используют конструкцию while (true).
При этом он, как и любой другой цикл, может быть прерван дерективой break.

Обе эти дерективы поддерживают метки, которые ставятся перед циклом.
Метки - единственный способ выйти за пределы текущего цикла, повлеять на выполнение внешнего
Помним, что метки не позволяют перепрыгнуть в произвольное место кода, в JavaScript нет такой возможности
*/


























































































































































































































































































